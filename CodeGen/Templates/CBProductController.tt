<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using AutoMapper;
using Commerce.Adapters.CitybreakAdapter.Controllers.DTO;
using Commerce.Adapters.CitybreakAdapter.Infrastructure;
using Commerce.Adapters.CitybreakAdapter.Model.AntiCorruptionLayer.Interfaces;
using Commerce.Adapters.CitybreakAdapter.Model.Commerce.Config;
using Commerce.Adapters.CitybreakAdapter.Model.Commerce.Error;
using Commerce.Adapters.CitybreakAdapter.Model.Commerce.Helpers;
using Commerce.Adapters.CitybreakAdapter.Model.Commerce.Requests;
using Commerce.Adapters.CitybreakAdapter.Model.Commerce.Responses;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;


namespace Commerce.Adapters.CitybreakAdapter.Controllers
{
    [Route("v0/Adapter")]
    [ApiController]
    public class CitybreakProductController : ControllerBase
    {
        private readonly IMapper mapper;
        private readonly ILogger<CitybreakProductController> logger;
        private readonly IProductService productService;

        public CitybreakProductController(IProductService productService, ILogger<CitybreakProductController> logger, IMapper mapper)
        {
            this.logger = logger ?? throw New ArgumentNullException(NameOf(logger));
            this.productService = productService ?? throw New ArgumentNullException(NameOf(productService));
            this.mapper = mapper ?? throw New ArgumentNullException(NameOf(mapper));
        }


        /// <summary>
        /// <para>Product lookup.</para>
        /// <para>
        /// One entry in HttpEndpoints should be set up:
        /// Product search {{ApiBase}}/api/activity
        /// </para>
        /// </summary>
        /// <param name="request">The product lookup request object. <see cref="AdapterMessage"/></param>
        /// <returns><see cref="AdapterResultMessage"/></returns>
        		
<#= EndpointsCode #>


        /// <summary>
        /// Creates ProductServiceMessage based on ServiceMessage, AdapterConfig And AuthorizationConfig. 
        /// </summary>
        /// <param name="serviceMessage">Adapter service message object. <see cref="ServiceMessage"/></param>
        /// <param name="config">Adapter configuration object. <see cref="AdapterConfig"/></param>
        /// <param name="authorizationConfig">Authorization configuration object. <see cref="AuthorizationConfig"/></param>
        /// <returns><see cref="ProductServiceMessage"/></returns>
        /// <exception cref="ArgumentNullException"></exception>
        private ProductServiceMessage CreateProductServiceMessage(ServiceMessage serviceMessage, AdapterConfig config, AuthorizationConfig authorizationConfig)
        {
            if (serviceMessage == null)
                throw new ArgumentNullException(nameof(serviceMessage));
            if (string.IsNullOrEmpty(serviceMessage.Payload))
                throw new ArgumentNullException(nameof(serviceMessage.Payload));
            if (authorizationConfig == null)
                throw new ArgumentNullException(nameof(authorizationConfig));
            if (!(config.HttpEndpoints?.Any() ?? true))
                throw new ArgumentNullException(nameof(config.HttpEndpoints));

            // We may need multiple addresses, so they have to be sent in HttpEndpoints.
            ProductServiceConfig serviceConfig = new ProductServiceConfig
            {
                HttpEndpoints = config.HttpEndpoints.ToList()
            };

            // Deserialize the base message from the payload JSON.
            ProductServiceMessage? message = JsonConvert.DeserializeObject<ProductServiceMessage>(serviceMessage.Payload);

            if (message == null)
                throw new Exception("Deserialization of product service message failed.");

            // Set the config objects.
            message.ServiceConfig = serviceConfig;
            message.AuthorizationConfig = authorizationConfig;

            return message;
        }
    }
}
